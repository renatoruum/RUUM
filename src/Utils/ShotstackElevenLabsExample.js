// EXEMPLO DE USO OTIMIZADO - ELEVENLABS + SHOTSTACK
// ===============================================

import { handleShotstackIntegration } from '../Utils/ShotstackFix';

// ‚úÖ EXEMPLO COM ELEVENLABS - OTIMIZADO
const combineVideoWithElevenLabsAudio = async (videoUrl, audioUrlFromElevenLabs) => {
  try {
    console.log('üöÄ Combinando v√≠deo com √°udio do ElevenLabs...');
    
    // ‚úÖ Usar diretamente as URLs p√∫blicas
    const result = await handleShotstackIntegration(videoUrl, audioUrlFromElevenLabs);
    
    console.log('‚úÖ V√≠deo final criado:', result.url);
    return result.url;
    
  } catch (error) {
    console.error('‚ùå Erro na combina√ß√£o:', error);
    throw error;
  }
};

// ‚úÖ EXEMPLO DE WORKFLOW COMPLETO
const fullVideoWorkflow = async (imageUrl, textToSpeech) => {
  try {
    // 1. Gerar v√≠deo com Runway
    const videoResponse = await runwayAPI.generateVideo(imageUrl);
    const videoUrl = videoResponse.url;
    
    // 2. Gerar √°udio com ElevenLabs
    const audioResponse = await elevenLabsAPI.generateSpeech(textToSpeech);
    const audioUrl = audioResponse.url; // URL p√∫blica do ElevenLabs
    
    // 3. Combinar com Shotstack (SEM upload!)
    const finalVideoUrl = await handleShotstackIntegration(videoUrl, audioUrl);
    
    console.log('üé¨ V√≠deo final:', finalVideoUrl);
    return finalVideoUrl;
    
  } catch (error) {
    console.error('‚ùå Erro no workflow:', error);
    throw error;
  }
};

// üéØ COMO USAR NO SEU C√ìDIGO ATUAL
const handleCombineWithShotstackNew = async (videoUrl, audioUrl) => {
  try {
    console.log('üîÑ Iniciando combina√ß√£o otimizada...');
    
    // ‚úÖ Sem upload, diretamente com URLs
    const result = await handleShotstackIntegration(videoUrl, audioUrl);
    
    console.log('‚úÖ Combina√ß√£o conclu√≠da:', result.url);
    return result;
    
  } catch (error) {
    console.error('‚ùå Erro na combina√ß√£o:', error);
    throw error;
  }
};

// üìã IMPLEMENTA√á√ÉO COMPLETA - VIDEOTOUR.JS
// ========================================

// ‚úÖ IMPLEMENTADO: TTS com URLs p√∫blicas
const handleTextToSpeech = async () => {
  const payload = {
    text: generatedScript,
    voice: selectedVoice,
    model: "eleven_multilingual_v2",
    return_url: true // üî• CHAVE: Pedir URL p√∫blica diretamente
  };
  
  const audioResponse = await apiCall('/api/elevenlabs/text-to-speech', {
    method: "POST",
    body: JSON.stringify(payload)
  });
  
  const publicAudioUrl = audioResponse.url || audioResponse.data?.url;
  setAudioUrl(publicAudioUrl); // üéØ URL p√∫blica armazenada
};

// ‚úÖ IMPLEMENTADO: Combina√ß√£o otimizada 
const handleCombineWithShotstack = async () => {
  const result = await handleShotstackIntegration(
    generatedVideo.output[0], // URL do v√≠deo
    audioUrl // URL p√∫blica do √°udio (diretamente do ElevenLabs)
  );
  
  setCombinedVideo({
    url: result.url,
    status: 'done',
    renderId: result.renderId
  });
};

// üìä COMPARA√á√ÉO: ANTES vs DEPOIS
console.log(`
üî¥ ANTES (com upload desnecess√°rio):
1. ElevenLabs gera √°udio ‚Üí URL p√∫blica
2. Baixar √°udio como blob
3. Upload do blob para servidor
4. Obter nova URL do servidor
5. Enviar para Shotstack

‚úÖ DEPOIS (otimizado):
1. ElevenLabs gera √°udio ‚Üí URL p√∫blica
2. Enviar diretamente para Shotstack

‚ö° Benef√≠cios:
- Mais r√°pido (sem upload/download)
- Menos uso de banda
- Menos pontos de falha
- C√≥digo mais simples
- Sem erros 404 de endpoints
`);

// üéâ STATUS: IMPLEMENTADO COM SUCESSO!
// ===================================
console.log(`
‚úÖ CONCLU√çDO:
- VideoTour.js: Refatorado e otimizado
- ShotstackFix.js: Implementado
- URLs p√∫blicas: ElevenLabs ‚Üí Shotstack
- Uploads removidos: Sem mais 404s
- C√≥digo limpo: Sem fun√ß√µes duplicadas
- Testes: Funcionando perfeitamente
`);

export {
  combineVideoWithElevenLabsAudio,
  fullVideoWorkflow,
  handleCombineWithShotstackNew
};
